{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\liadg\\\\Downloads\\\\Chat-App-BackGammon-main\\\\Chat-App-BackGammon-main\\\\frontend\\\\src\\\\components\\\\gameComponents\\\\Game\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport \"./Game.css\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport GameBoard from \"../GameBoard/GameBoard\";\nimport RollDice from \"../RollDice/RollDice\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport PiecesBox from \"../PiecesBox/PiecesBox\";\nimport gameService from \"../../../services/gameService\";\nimport game from \"../../../services/gameService\";\nimport { io } from \"socket.io-client\";\nimport { movePiece } from \"../../../services/gameService\";\nimport Jail from \"../Jail/Jail\";\nimport Winning from \"../Winning/Winning\";\nimport Losing from \"../Losing/Losing\";\nimport Modal from \"../../Modal/Modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game(props) {\n  _s();\n\n  const [isMyTurn, setIsMyTurn] = useState();\n  const [color, setColor] = useState('');\n  const [whiteBox, setWhiteBox] = useState([]);\n  const [blackBox, setBlackBox] = useState([]);\n  const [jailBox, setJailBox] = useState([]);\n  const [enemyRoll, setEnemyRoll] = useState(localStorage.getItem(\"color\") === \"white\" ? true : false);\n  const [gameArray, setGameArray] = useState([]);\n  const [rolledOnce, setRolledOnce] = useState(false);\n  const [isWon, setIsWon] = useState(false);\n  const [isLost, setIsLost] = useState(false);\n  const [openModalQuit, setOpenModalQuit] = useState(false);\n  const [openModalQuitPermission, setOpenModalQuitPermission] = useState(false);\n  const [seconds, setSeconds] = useState(60);\n  useEffect(() => {\n    if (seconds < 1) {\n      if (isMyTurn) {\n        endTurn();\n      }\n    }\n\n    const timer = seconds > 0 && setInterval(() => setSeconds(seconds - 1), 1000);\n    return () => clearInterval(timer);\n  }, [seconds]);\n  useEffect(() => {\n    setGameArray(game.gameBoard);\n  }, []);\n  const socket = useRef();\n  useEffect(() => {\n    socket.current = io(\"https://chat-app-backgammon-server.herokuapp.com\"); //\"ws://localhost:3002\"\n\n    socket.current.on(\"enemyRolledDice\", data => {\n      setEnemyRoll({\n        number1: data.number1,\n        number2: data.number2\n      });\n      localStorage.setItem(\"value1\", data.number1);\n      localStorage.setItem(\"value2\", data.number2);\n\n      if (localStorage.getItem(\"value1\") === localStorage.getItem(\"value2\")) {\n        localStorage.setItem(\"value3\", data.number1);\n        localStorage.setItem(\"value4\", data.number2);\n      }\n\n      setRolledOnce(true);\n    });\n    socket.current.on(\"enemyMovedPiece\", data => {\n      movePiece(data.itemId, data.place, true);\n      updateBoard();\n    });\n    socket.current.on(\"enemyRemovePiece\", data => {\n      game.addPieceToBox(data.item);\n      updateBoard();\n    });\n    socket.current.on(\"oppositeQuit\", () => {\n      setIsWon(true);\n      setOpenModalQuit(true); // props.history.replace(\"/\");\n    });\n  }, []);\n  useEffect(() => {\n    socket.current.on(\"switchTurns\", senderColor => {\n      if (senderColor === localStorage.getItem(\"userColor\")) return;\n      console.log(\"switchTurns\");\n      localStorage.removeItem(\"value1\");\n      localStorage.removeItem(\"value2\");\n      localStorage.removeItem(\"value3\");\n      localStorage.removeItem(\"value4\");\n      switchTheTurn();\n    });\n  }, []);\n  useEffect(() => {\n    socket.current.emit(\"connectToRoom\", localStorage.getItem(\"roomName\"));\n  }, []);\n  useEffect(() => {\n    setWhiteBox(gameService.whitePiecesBox);\n    setBlackBox(gameService.blackPiecesBox);\n    setJailBox(gameService.jail.pieces);\n    setColor(localStorage.getItem(\"userColor\"));\n\n    if (color === \"white\") {\n      setIsMyTurn(true);\n    }\n\n    if (color === \"black\") {\n      setIsMyTurn(false);\n    }\n  }, [color]);\n\n  const switchTheTurn = () => {\n    setSeconds(60);\n    setIsMyTurn(null);\n    setIsMyTurn(true);\n    setRolledOnce(false);\n  };\n\n  const endTurn = () => {\n    setSeconds(60);\n    setIsMyTurn(false);\n    setRolledOnce(false);\n    socket.current.emit(\"endTurn\", localStorage.getItem(\"roomName\"), color);\n  };\n\n  const updateBoard = () => {\n    const newGameArray = game.gameBoard;\n    setGameArray([]);\n    setGameArray([...newGameArray]);\n    const newJailBox = game.jail.pieces;\n    setJailBox([]);\n    setJailBox([...newJailBox]);\n  };\n\n  const updateWhiteBox = () => {\n    const newPiecesBox = gameService.whitePiecesBox;\n    setWhiteBox([]);\n    setWhiteBox(newPiecesBox);\n    updateBoard();\n\n    if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"white\") {\n      setIsWon(true);\n    } else if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"black\") {\n      setIsLost(true);\n    }\n  };\n\n  const updateBlackBox = () => {\n    const newPiecesBox = gameService.blackPiecesBox;\n    setBlackBox([]);\n    setBlackBox(newPiecesBox);\n    updateBoard();\n\n    if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"black\") {\n      setIsWon(true);\n    } else if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"white\") {\n      setIsLost(true);\n    }\n  };\n\n  const updateJailBox = () => {\n    const newJailBox = gameService.jail;\n    setJailBox([]);\n    setJailBox(newJailBox);\n    updateBoard();\n  };\n\n  const quitGame = () => {\n    setOpenModalQuitPermission(true);\n  };\n\n  const quitGameEnsured = () => {\n    props.history.replace(\"/\");\n    socket.current.emit(\"playerQuitGame\", localStorage.getItem(\"roomName\"));\n  };\n\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: [/*#__PURE__*/_jsxDEV(PiecesBox, {\n      socket: socket,\n      pieces: blackBox,\n      updateBox: updateBlackBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gameBox\",\n      children: [isWon && /*#__PURE__*/_jsxDEV(Winning, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 27\n      }, this), isLost && /*#__PURE__*/_jsxDEV(Losing, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 28\n      }, this), !isWon && !isLost && /*#__PURE__*/_jsxDEV(GameBoard, {\n        colorOfTheUser: color,\n        socket: socket,\n        isMyTurn: isMyTurn,\n        updateBoard: updateBoard,\n        gameArray: gameArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 39\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        text: \"Your friend quit the game\",\n        open: openModalQuit,\n        acceptMethod: () => setOpenModalQuit(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        text: \"Are you sure you want to quit?\",\n        open: openModalQuitPermission,\n        acceptMethod: quitGameEnsured,\n        rejectMethod: () => setOpenModalQuitPermission(false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Jail, {\n        socket: socket,\n        pieces: jailBox,\n        updateBox: updateJailBox,\n        isMyTurn: isMyTurn,\n        colorOfTheUser: color\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RollDice, {\n        seconds: seconds,\n        quitGame: quitGame,\n        endTurn: endTurn,\n        rolledOnce: rolledOnce,\n        enemyRoll: enemyRoll,\n        socket: socket,\n        isMyTurn: isMyTurn\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PiecesBox, {\n      socket: socket,\n      pieces: whiteBox,\n      updateBox: updateWhiteBox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"r2K8zHxdOS39c8Z0YSiFu+tuX4s=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/liadg/Downloads/Chat-App-BackGammon-main/Chat-App-BackGammon-main/frontend/src/components/gameComponents/Game/Game.js"],"names":["React","useEffect","useState","useRef","GameBoard","RollDice","DndProvider","HTML5Backend","PiecesBox","gameService","game","io","movePiece","Jail","Winning","Losing","Modal","Game","props","isMyTurn","setIsMyTurn","color","setColor","whiteBox","setWhiteBox","blackBox","setBlackBox","jailBox","setJailBox","enemyRoll","setEnemyRoll","localStorage","getItem","gameArray","setGameArray","rolledOnce","setRolledOnce","isWon","setIsWon","isLost","setIsLost","openModalQuit","setOpenModalQuit","openModalQuitPermission","setOpenModalQuitPermission","seconds","setSeconds","endTurn","timer","setInterval","clearInterval","gameBoard","socket","current","on","data","number1","number2","setItem","itemId","place","updateBoard","addPieceToBox","item","senderColor","console","log","removeItem","switchTheTurn","emit","whitePiecesBox","blackPiecesBox","jail","pieces","newGameArray","newJailBox","updateWhiteBox","newPiecesBox","length","updateBlackBox","updateJailBox","quitGame","quitGameEnsured","history","replace"],"mappings":"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","sourcesContent":["import \"./Game.css\";\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport GameBoard from \"../GameBoard/GameBoard\";\r\nimport RollDice from \"../RollDice/RollDice\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\nimport PiecesBox from \"../PiecesBox/PiecesBox\";\r\nimport gameService from \"../../../services/gameService\";\r\nimport game from \"../../../services/gameService\";\r\nimport { io } from \"socket.io-client\";\r\nimport { movePiece } from \"../../../services/gameService\";\r\nimport Jail from \"../Jail/Jail\";\r\nimport Winning from \"../Winning/Winning\";\r\nimport Losing from \"../Losing/Losing\";\r\nimport Modal from \"../../Modal/Modal\";\r\n\r\n\r\nfunction Game(props) {\r\n    const [isMyTurn, setIsMyTurn] = useState();\r\n    const [color, setColor] = useState('');\r\n    const [whiteBox, setWhiteBox] = useState([]);\r\n    const [blackBox, setBlackBox] = useState([]);\r\n    const [jailBox, setJailBox] = useState([]);\r\n    const [enemyRoll, setEnemyRoll] = useState((localStorage.getItem(\"color\") === \"white\" ? true : false));\r\n    const [gameArray, setGameArray] = useState([]);\r\n    const [rolledOnce, setRolledOnce] = useState(false);\r\n    const [isWon, setIsWon] = useState(false);\r\n    const [isLost, setIsLost] = useState(false);\r\n    const [openModalQuit, setOpenModalQuit] = useState(false);\r\n    const [openModalQuitPermission, setOpenModalQuitPermission] = useState(false);\r\n    const [seconds, setSeconds] = useState(60);\r\n\r\n\r\n    useEffect(() => {\r\n        if(seconds<1){\r\n            if(isMyTurn)\r\n            {\r\n                endTurn();\r\n            }\r\n        }\r\n        const timer =\r\n            seconds > 0 && setInterval(() => setSeconds(seconds - 1), 1000);\r\n        return () => clearInterval(timer);\r\n    }, [seconds]);\r\n\r\n\r\n    useEffect(() => {\r\n        setGameArray(game.gameBoard);\r\n    }, [])\r\n\r\n\r\n\r\n    const socket = useRef();\r\n    useEffect(() => {\r\n        socket.current = io(\"https://chat-app-backgammon-server.herokuapp.com\");\r\n        //\"ws://localhost:3002\"\r\n        socket.current.on(\"enemyRolledDice\", (data) => {\r\n            setEnemyRoll({ number1: data.number1, number2: data.number2 });\r\n            localStorage.setItem(\"value1\", data.number1);\r\n            localStorage.setItem(\"value2\", data.number2);\r\n            if (localStorage.getItem(\"value1\") === localStorage.getItem(\"value2\")) {\r\n                localStorage.setItem(\"value3\", data.number1);\r\n                localStorage.setItem(\"value4\", data.number2);\r\n            }\r\n            setRolledOnce(true);\r\n        })\r\n\r\n        socket.current.on(\"enemyMovedPiece\", (data) => {\r\n            movePiece(data.itemId, data.place, true);\r\n            updateBoard();\r\n        })\r\n        socket.current.on(\"enemyRemovePiece\", (data) => {\r\n            game.addPieceToBox(data.item);\r\n            updateBoard();\r\n        })\r\n        socket.current.on(\"oppositeQuit\", () => {\r\n            setIsWon(true);\r\n            setOpenModalQuit(true);\r\n            // props.history.replace(\"/\");\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        socket.current.on(\"switchTurns\", (senderColor) => {\r\n            if (senderColor === localStorage.getItem(\"userColor\")) return;\r\n            console.log(\"switchTurns\");\r\n            localStorage.removeItem(\"value1\");\r\n            localStorage.removeItem(\"value2\");\r\n            localStorage.removeItem(\"value3\");\r\n            localStorage.removeItem(\"value4\");\r\n            switchTheTurn();\r\n        })\r\n    }, [])\r\n\r\n\r\n    useEffect(() => {\r\n        socket.current.emit(\"connectToRoom\", localStorage.getItem(\"roomName\"));\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setWhiteBox(gameService.whitePiecesBox);\r\n        setBlackBox(gameService.blackPiecesBox);\r\n        setJailBox(gameService.jail.pieces);\r\n        setColor(localStorage.getItem(\"userColor\"));\r\n        if (color === \"white\") {\r\n            setIsMyTurn(true);\r\n        }\r\n        if (color === \"black\") {\r\n            setIsMyTurn(false);\r\n        }\r\n    }, [color])\r\n\r\n    const switchTheTurn = () => {\r\n        setSeconds(60);\r\n        setIsMyTurn(null);\r\n        setIsMyTurn(true);\r\n        setRolledOnce(false);\r\n    }\r\n\r\n    const endTurn = () => {\r\n        setSeconds(60);\r\n        setIsMyTurn(false);\r\n        setRolledOnce(false);\r\n        socket.current.emit(\"endTurn\", localStorage.getItem(\"roomName\"), color);\r\n    }\r\n    const updateBoard = () => {\r\n        const newGameArray = game.gameBoard;\r\n        setGameArray([]);\r\n        setGameArray([...newGameArray]);\r\n        const newJailBox = game.jail.pieces;\r\n        setJailBox([]);\r\n        setJailBox([...newJailBox]);\r\n\r\n    }\r\n    const updateWhiteBox = () => {\r\n        const newPiecesBox = gameService.whitePiecesBox;\r\n        setWhiteBox([]);\r\n        setWhiteBox(newPiecesBox);\r\n        updateBoard();\r\n\r\n        if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"white\") {\r\n            setIsWon(true);\r\n        }\r\n        else if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"black\") {\r\n            setIsLost(true);\r\n        }\r\n    }\r\n\r\n\r\n    const updateBlackBox = () => {\r\n        const newPiecesBox = gameService.blackPiecesBox;\r\n        setBlackBox([]);\r\n        setBlackBox(newPiecesBox);\r\n        updateBoard();\r\n\r\n        if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"black\") {\r\n            setIsWon(true);\r\n        }\r\n        else if (newPiecesBox.length > 14 && localStorage.getItem(\"userColor\") === \"white\") {\r\n            setIsLost(true);\r\n        }\r\n    }\r\n\r\n    const updateJailBox = () => {\r\n        const newJailBox = gameService.jail;\r\n        setJailBox([]);\r\n        setJailBox(newJailBox);\r\n        updateBoard();\r\n    }\r\n    const quitGame = () => {\r\n        setOpenModalQuitPermission(true);\r\n    }\r\n    const quitGameEnsured = () => {\r\n        props.history.replace(\"/\");\r\n        socket.current.emit(\"playerQuitGame\", localStorage.getItem(\"roomName\"));\r\n    }\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <PiecesBox socket={socket} pieces={blackBox} updateBox={updateBlackBox} />\r\n            <div className=\"gameBox\">\r\n                {isWon && <Winning />}\r\n                {isLost && <Losing />}\r\n                {!isWon && !isLost && <GameBoard colorOfTheUser={color} socket={socket}\r\n                    isMyTurn={isMyTurn} updateBoard={updateBoard} gameArray={gameArray} />}\r\n                <Modal text=\"Your friend quit the game\" open={openModalQuit} acceptMethod={() => setOpenModalQuit(false)} />\r\n                <Modal text=\"Are you sure you want to quit?\" open={openModalQuitPermission} acceptMethod={quitGameEnsured} rejectMethod={() => setOpenModalQuitPermission(false)} />\r\n                <Jail socket={socket}\r\n                    pieces={jailBox}\r\n                    updateBox={updateJailBox}\r\n                    isMyTurn={isMyTurn}\r\n                    colorOfTheUser={color}\r\n                />\r\n                <RollDice seconds={seconds} quitGame={quitGame} endTurn={endTurn} rolledOnce={rolledOnce} enemyRoll={enemyRoll} socket={socket} isMyTurn={isMyTurn} />\r\n            </div>\r\n            <PiecesBox socket={socket} pieces={whiteBox} updateBox={updateWhiteBox} />\r\n\r\n        </DndProvider>\r\n    )\r\n}\r\n\r\nexport default Game\r\n"]},"metadata":{},"sourceType":"module"}